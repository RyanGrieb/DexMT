{"version":3,"file":"static_ts-front-end_watch-list_ts.app.bundle.js","mappings":";;;;;;;;;;;;;;;AAAA,gBAAgB,SAAI,IAAI,SAAI;AAC5B;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,cAAc,6BAA6B,0BAA0B,cAAc,qBAAqB;AACxG,6IAA6I,cAAc;AAC3J,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,mCAAmC,SAAS;AAC5C,mCAAmC,WAAW,UAAU;AACxD,0CAA0C,cAAc;AACxD;AACA,8GAA8G,OAAO;AACrH,iFAAiF,iBAAiB;AAClG,yDAAyD,gBAAgB,QAAQ;AACjF,+CAA+C,gBAAgB,gBAAgB;AAC/E;AACA,kCAAkC;AAClC;AACA;AACA,UAAU,YAAY,aAAa,SAAS,UAAU;AACtD,oCAAoC,SAAS;AAC7C;AACA;AACsC;AACK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,oCAAoC,yBAAyB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,QAAQ,wDAAe;AACvB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wDAAe;AACvC;AACA;AACA;AACA,4DAA4D,8DAA8D;AAC1H,wBAAwB,wDAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,eAAe,wCAAwC;AAC7G;AACA;AACA,oBAAoB,wDAAe;AACnC;AACA;AACA;AACA;AACA,oBAAoB,wDAAe;AACnC;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,8CAAK;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,8CAAK;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,yDAAyD;AACzD;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,iCAAiC;AACjC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,8FAA8F,WAAW;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,+BAA+B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,+BAA+B;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAe;AACnC;AACA;AACA;AACA,0BAA0B,+CAAQ,aAAa,+CAAQ,uBAAuB,+CAAQ;AACtF,wBAAwB,wDAAe;AACvC;AACA;AACA;AACA,oBAAoB,wDAAe;AACnC;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAe;AAC/B;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,yDAAyD,kCAAkC;AAC3F;AACA;AACA;AACA,QAAQ,wDAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+CAAQ,aAAa,+CAAQ,uBAAuB,+CAAQ;AAChG;AACA,wBAAwB,wDAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wDAAe;AACvC;AACA;AACA;AACA;AACA;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAe;AACnC;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,mCAAmC;AACnG;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kFAAkF,WAAW;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAAQ,aAAa,+CAAQ,uBAAuB,+CAAQ;AAC9E,gBAAgB,wDAAe;AAC/B;AACA;AACA,4DAA4D,6BAA6B;AACzF;AACA;AACA;AACA;AACA,gBAAgB,wDAAe;AAC/B;AACA;AACA,gBAAgB,wDAAe;AAC/B;AACA;AACA;AACA,gBAAgB,wDAAe;AAC/B;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,6CAA6C;AACtG;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wDAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iBAAiB,+WAA+W;AACza;AACA;AACA,QAAQ,wDAAe;AACvB;AACA;AACA;AACA,QAAQ,wDAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,wDAAe;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,0BAA0B;AAC5G,kFAAkF,0BAA0B;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,qDAAqD,kCAAkC;AACvF;AACA,QAAQ,wDAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,+DAA+D,4BAA4B,eAAe,6EAA6E,KAAK;AAC5L;AACA;AACA,QAAQ,wDAAe;AACvB,KAAK;AACL;AACA;AACA,QAAQ,wDAAe;AACvB,KAAK;AACL;AACA;AACA,qDAAqD,kCAAkC;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://hono/./static/ts-front-end/watch-list.ts"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { provider } from \"./metamask\";\nimport { default as utils } from \"./utils\";\nvar watchedUsers = [];\nvar watchedPositions = [];\nvar copyConfig = {\n    maxPositionSize: 1000,\n    maxLeverage: 5,\n    riskPercentage: 2,\n    allowedTokens: [\"ETH\", \"BTC\"],\n    autoCopyEnabled: false,\n    stopLossEnabled: false,\n    stopLossPercent: 10,\n    takeProfitEnabled: false,\n    takeProfitPercent: 20,\n};\n// Add this variable at the top to cache the template\nvar watchedUserRowTemplate = null;\nexport function showWatchList() {\n    // Load watch list HTML\n    fetch(\"/html/watch-list.html\")\n        .then(function (response) { return response.text(); })\n        .then(function (html) {\n        var indexContent = document.querySelector(\".index-content\");\n        if (indexContent) {\n            indexContent.innerHTML = html;\n            initializeWatchList();\n            loadWatchedUsers();\n            loadWatchedPositions();\n            loadCopyConfiguration();\n        }\n    })\n        .catch(function (error) {\n        console.error(\"Error loading watch list HTML:\", error);\n        utils.showToast(\"Failed to load watch list\", \"error\");\n    });\n}\nfunction initializeWatchList() {\n    // Add trader button\n    var addTraderBtn = document.getElementById(\"addTraderBtn\");\n    if (addTraderBtn) {\n        addTraderBtn.addEventListener(\"click\", showAddTraderDialog);\n    }\n    // Copy configuration checkboxes\n    var stopLossCheckbox = document.getElementById(\"stopLossEnabled\");\n    var takeProfitCheckbox = document.getElementById(\"takeProfitEnabled\");\n    var stopLossInput = document.getElementById(\"stopLossPercent\");\n    var takeProfitInput = document.getElementById(\"takeProfitPercent\");\n    if (stopLossCheckbox && stopLossInput) {\n        stopLossCheckbox.addEventListener(\"change\", function () {\n            stopLossInput.disabled = !stopLossCheckbox.checked;\n        });\n    }\n    if (takeProfitCheckbox && takeProfitInput) {\n        takeProfitCheckbox.addEventListener(\"change\", function () {\n            takeProfitInput.disabled = !takeProfitCheckbox.checked;\n        });\n    }\n    // Save configuration button\n    var saveConfigBtn = document.getElementById(\"saveConfigBtn\");\n    if (saveConfigBtn) {\n        saveConfigBtn.addEventListener(\"click\", saveCopyConfiguration);\n    }\n    // Reset configuration button\n    var resetConfigBtn = document.getElementById(\"resetConfigBtn\");\n    if (resetConfigBtn) {\n        resetConfigBtn.addEventListener(\"click\", resetCopyConfiguration);\n    }\n    // Add token button\n    var addTokenBtn = document.getElementById(\"addTokenBtn\");\n    if (addTokenBtn) {\n        addTokenBtn.addEventListener(\"click\", addCustomToken);\n    }\n}\nfunction showAddTraderDialog() {\n    var address = prompt(\"Enter trader address to watch:\");\n    if (address && address.trim()) {\n        addTraderToWatchList(address.trim());\n    }\n}\nfunction addTraderToWatchList(address) {\n    return __awaiter(this, void 0, void 0, function () {\n        var response, userData, watchedUser, error_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 3, , 4]);\n                    // Validate address format\n                    if (!address.startsWith(\"0x\") || address.length !== 42) {\n                        utils.showToast(\"Invalid address format\", \"error\");\n                        return [2 /*return*/];\n                    }\n                    // Check if already watching\n                    if (watchedUsers.some(function (user) { return user.address.toLowerCase() === address.toLowerCase(); })) {\n                        utils.showToast(\"Already watching this trader\", \"warning\");\n                        return [2 /*return*/];\n                    }\n                    return [4 /*yield*/, fetch(\"/api/users/\".concat(address))];\n                case 1:\n                    response = _a.sent();\n                    if (!response.ok) {\n                        throw new Error(\"Trader not found\");\n                    }\n                    return [4 /*yield*/, response.json()];\n                case 2:\n                    userData = _a.sent();\n                    watchedUser = __assign(__assign({}, userData), { copyStatus: \"inactive\", watching: true });\n                    watchedUsers.push(watchedUser);\n                    updateWatchedUsersUI();\n                    utils.showToast(\"Added \".concat(address.slice(0, 6), \"...\").concat(address.slice(-4), \" to watch list\"), \"success\");\n                    return [3 /*break*/, 4];\n                case 3:\n                    error_1 = _a.sent();\n                    console.error(\"Error adding trader:\", error_1);\n                    utils.showToast(\"Failed to add trader to watch list\", \"error\");\n                    return [3 /*break*/, 4];\n                case 4: return [2 /*return*/];\n            }\n        });\n    });\n}\nfunction updateWatchedUsersUI() {\n    return __awaiter(this, void 0, void 0, function () {\n        var watchedUsersList, fragment, response, error_2, emptyRow;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    watchedUsersList = document.querySelector(\".watched-users-list\");\n                    if (!watchedUsersList)\n                        return [2 /*return*/];\n                    fragment = document.createDocumentFragment();\n                    if (!(watchedUsers.length > 0)) return [3 /*break*/, 8];\n                    if (!!watchedUserRowTemplate) return [3 /*break*/, 7];\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 6, , 7]);\n                    return [4 /*yield*/, fetch(\"/html/watched-user-row.html\")];\n                case 2:\n                    response = _a.sent();\n                    if (!response.ok) return [3 /*break*/, 4];\n                    return [4 /*yield*/, response.text()];\n                case 3:\n                    watchedUserRowTemplate = _a.sent();\n                    return [3 /*break*/, 5];\n                case 4: throw new Error(\"Failed to load template\");\n                case 5: return [3 /*break*/, 7];\n                case 6:\n                    error_2 = _a.sent();\n                    console.error(\"Error loading watched user row template:\", error_2);\n                    utils.showToast(\"Failed to load template\", \"error\");\n                    return [2 /*return*/];\n                case 7:\n                    watchedUsers.forEach(function (user, index) {\n                        // Create a table to properly parse the tr element\n                        var tempTable = document.createElement(\"table\");\n                        tempTable.innerHTML = \"<tbody>\".concat(watchedUserRowTemplate, \"</tbody>\");\n                        var userRow = tempTable.querySelector(\"tr.watched-user-item\");\n                        if (userRow) {\n                            // Update elements based on their IDs\n                            var addressHash = user.address.slice(2, 4).toUpperCase();\n                            // Trader checkbox\n                            var traderCheckbox = userRow.querySelector(\"#trader-checkbox\");\n                            if (traderCheckbox) {\n                                traderCheckbox.setAttribute(\"data-address\", user.address);\n                                traderCheckbox.removeAttribute(\"id\");\n                            }\n                            // Rank\n                            var userRank = userRow.querySelector(\"#user-rank\");\n                            if (userRank) {\n                                userRank.textContent = \"#\".concat(user.platform_ranking || index + 1);\n                                userRank.removeAttribute(\"id\");\n                            }\n                            // Platform\n                            var userPlatform = userRow.querySelector(\"#user-platform\");\n                            if (userPlatform) {\n                                userPlatform.innerHTML = utils.getPlatformIcon(user.dex_platform);\n                                userPlatform.removeAttribute(\"id\");\n                            }\n                            // Trader icon\n                            var traderIcon = userRow.querySelector(\"#trader-icon\");\n                            if (traderIcon) {\n                                traderIcon.textContent = addressHash;\n                                traderIcon.style.background = utils.generateIconColor(user.address);\n                                traderIcon.removeAttribute(\"id\");\n                            }\n                            // Trader address\n                            var traderAddress = userRow.querySelector(\"#trader-address\");\n                            if (traderAddress) {\n                                traderAddress.textContent = \"\".concat(user.address.slice(0, 6), \"...\").concat(user.address.slice(-4));\n                                traderAddress.removeAttribute(\"id\");\n                            }\n                            // PNL\n                            var userPnl = userRow.querySelector(\"#user-pnl\");\n                            if (userPnl) {\n                                var pnlValue = Number(user.pnlPercentage || 0);\n                                userPnl.textContent = \"\".concat(pnlValue.toFixed(2), \"%\");\n                                userPnl.className = \"user-pnl \".concat(pnlValue >= 0 ? \"positive\" : \"negative\");\n                                userPnl.removeAttribute(\"id\");\n                            }\n                            // Win Ratio\n                            var userWinRatio = userRow.querySelector(\"#user-winratio\");\n                            if (userWinRatio) {\n                                var winRatioValue = Number(user.winRatio || 0);\n                                userWinRatio.textContent = winRatioValue.toFixed(2);\n                                userWinRatio.removeAttribute(\"id\");\n                            }\n                            // Watching count\n                            var userWatching = userRow.querySelector(\"#user-watching\");\n                            if (userWatching) {\n                                userWatching.textContent = (user.watching || 0).toString();\n                                userWatching.removeAttribute(\"id\");\n                            }\n                            // Actions button\n                            var actionsBtn = userRow.querySelector(\"#actions-btn\");\n                            if (actionsBtn) {\n                                actionsBtn.setAttribute(\"data-address\", user.address);\n                                actionsBtn.removeAttribute(\"id\");\n                            }\n                            // Add click event listener to select user (same as top-traders)\n                            userRow.addEventListener(\"click\", function (e) {\n                                // Don't trigger selection if clicking on checkbox\n                                if (!e.target.closest(\".trader-checkbox\")) {\n                                    console.log(\"User row clicked:\", user.address);\n                                    //selectUser(user);\n                                }\n                            });\n                            // Add event listener for checkbox\n                            if (traderCheckbox) {\n                                traderCheckbox.addEventListener(\"change\", function (e) {\n                                    e.stopPropagation(); // Prevent row click\n                                    handleTraderSelection(user.address, e.target.checked);\n                                });\n                            }\n                            // Add event listener for actions button\n                            if (actionsBtn) {\n                                actionsBtn.addEventListener(\"click\", function (e) {\n                                    e.stopPropagation(); // Prevent row click\n                                    showTraderActionsMenu(user.address, e.target);\n                                });\n                            }\n                            fragment.appendChild(userRow);\n                        }\n                    });\n                    return [3 /*break*/, 9];\n                case 8:\n                    emptyRow = document.createElement(\"tr\");\n                    emptyRow.className = \"watched-user-item\";\n                    emptyRow.innerHTML = \"\\n      <td colspan=\\\"7\\\" style=\\\"text-align:center;color:#666;padding:20px\\\">\\n        No traders in watch list. Click \\\"Add Trader\\\" to start watching.\\n      </td>\\n    \";\n                    fragment.appendChild(emptyRow);\n                    _a.label = 9;\n                case 9:\n                    watchedUsersList.replaceChildren(fragment);\n                    setupSelectAllCheckbox();\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nfunction showTraderActionsMenu(address, button) {\n    // Create a simple context menu for trader actions\n    var existingMenu = document.querySelector(\".trader-actions-menu\");\n    if (existingMenu) {\n        existingMenu.remove();\n    }\n    var menu = document.createElement(\"div\");\n    menu.className = \"trader-actions-menu\";\n    menu.innerHTML = \"\\n    <div class=\\\"menu-item\\\" data-action=\\\"config\\\">\\n      <svg width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 24 24\\\">\\n        <path fill=\\\"currentColor\\\" d=\\\"M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.82,11.69,4.82,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z\\\"/>\\n      </svg>\\n      Configure\\n    </div>\\n    <div class=\\\"menu-item\\\" data-action=\\\"positions\\\">\\n      <svg width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 24 24\\\">\\n        <path fill=\\\"currentColor\\\" d=\\\"M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M12,6A6,6 0 0,0 6,12A6,6 0 0,0 12,18A6,6 0 0,0 18,12A6,6 0 0,0 12,6Z\\\"/>\\n      </svg>\\n      View Positions\\n    </div>\\n    <div class=\\\"menu-item\\\" data-action=\\\"copy\\\" id=\\\"copy-toggle-\".concat(address, \"\\\">\\n      <svg width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 24 24\\\">\\n        <path fill=\\\"currentColor\\\" d=\\\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\\\"/>\\n      </svg>\\n      Start Copying\\n    </div>\\n    <div class=\\\"menu-item menu-item-danger\\\" data-action=\\\"remove\\\">\\n      <svg width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 24 24\\\">\\n        <path fill=\\\"currentColor\\\" d=\\\"M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z\\\"/>\\n      </svg>\\n      Remove from List\\n    </div>\\n  \");\n    // Position the menu near the button\n    var rect = button.getBoundingClientRect();\n    menu.style.position = \"fixed\";\n    menu.style.top = \"\".concat(rect.bottom + 5, \"px\");\n    menu.style.left = \"\".concat(rect.left, \"px\");\n    menu.style.zIndex = \"1000\";\n    // Update copy button text based on current status\n    var user = watchedUsers.find(function (u) { return u.address === address; });\n    var copyToggle = menu.querySelector(\"#copy-toggle-\".concat(address));\n    if (copyToggle && user) {\n        if (user.copyStatus === \"active\") {\n            copyToggle.innerHTML = \"\\n        <svg width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 24 24\\\">\\n          <path fill=\\\"currentColor\\\" d=\\\"M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z\\\"/>\\n        </svg>\\n        Stop Copying\\n      \";\n        }\n    }\n    // Add event listeners for menu items\n    menu.addEventListener(\"click\", function (e) {\n        var menuItem = e.target.closest(\".menu-item\");\n        if (!menuItem)\n            return;\n        var action = menuItem.getAttribute(\"data-action\");\n        switch (action) {\n            case \"config\":\n                showTraderConfig(address);\n                break;\n            case \"positions\":\n                showTraderPositions(address);\n                break;\n            case \"copy\":\n                toggleCopyStatus(address);\n                break;\n            case \"remove\":\n                removeTraderFromWatchList(address);\n                break;\n        }\n        menu.remove();\n    });\n    // Close menu when clicking outside\n    var closeMenu = function (e) {\n        if (!menu.contains(e.target)) {\n            menu.remove();\n            document.removeEventListener(\"click\", closeMenu);\n        }\n    };\n    document.addEventListener(\"click\", closeMenu);\n    document.body.appendChild(menu);\n}\nfunction toggleCopyStatus(address) {\n    return __awaiter(this, void 0, void 0, function () {\n        var user;\n        return __generator(this, function (_a) {\n            user = watchedUsers.find(function (u) { return u.address === address; });\n            if (!user)\n                return [2 /*return*/];\n            try {\n                if (user.copyStatus === \"active\") {\n                    // Stop copying\n                    user.copyStatus = \"inactive\";\n                    utils.showToast(\"Stopped copying \".concat(address.slice(0, 6), \"...\").concat(address.slice(-4)), \"info\");\n                }\n                else {\n                    // Start copying\n                    if (!(provider === null || provider === void 0 ? void 0 : provider.isConnected())) {\n                        utils.showToast(\"Please connect your wallet first\", \"warning\");\n                        return [2 /*return*/];\n                    }\n                    user.copyStatus = \"active\";\n                    utils.showToast(\"Started copying \".concat(address.slice(0, 6), \"...\").concat(address.slice(-4)), \"success\");\n                }\n                updateWatchedUsersUI();\n            }\n            catch (error) {\n                console.error(\"Error toggling copy status:\", error);\n                utils.showToast(\"Failed to update copy status\", \"error\");\n            }\n            return [2 /*return*/];\n        });\n    });\n}\nfunction removeTraderFromWatchList(address) {\n    var index = watchedUsers.findIndex(function (user) { return user.address === address; });\n    if (index !== -1) {\n        watchedUsers.splice(index, 1);\n        updateWatchedUsersUI();\n        utils.showToast(\"Removed trader from watch list\", \"info\");\n    }\n}\nfunction loadWatchedUsers() {\n    return __awaiter(this, void 0, void 0, function () {\n        var walletAddress, response, payload, _i, _a, trader, traderAddress, error_3;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    walletAddress = provider === null || provider === void 0 ? void 0 : provider.selectedAddress;\n                    if (!walletAddress) {\n                        utils.showToast(\"Please connect your wallet first\", \"warning\");\n                        return [2 /*return*/];\n                    }\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, 4, , 5]);\n                    return [4 /*yield*/, fetch(\"/api/watched_traders?walletAddress=\".concat(walletAddress))];\n                case 2:\n                    response = _b.sent();\n                    if (!response.ok) {\n                        throw new Error(\"Failed to fetch watched traders\");\n                    }\n                    return [4 /*yield*/, response.json()];\n                case 3:\n                    payload = (_b.sent());\n                    console.log(\"watched_traders payload:\", payload);\n                    if (!payload || !Array.isArray(payload.traders)) {\n                        utils.showToast(\"No watched traders found\", \"info\");\n                        return [2 /*return*/];\n                    }\n                    // Clear existing watched users\n                    watchedUsers = [];\n                    // Fetch user details for each watched trader\n                    for (_i = 0, _a = payload.traders; _i < _a.length; _i++) {\n                        trader = _a[_i];\n                        traderAddress = trader.address;\n                        watchedUsers.push({\n                            address: traderAddress,\n                            copyStatus: \"inactive\",\n                            watching: 0, // Default watching count\n                            platform_ranking: trader.platform_ranking, // Default ranking\n                            dex_platform: trader.dex_platform, // Default platform\n                            pnlPercentage: trader.pnlPercentage, // Default PnL percentage\n                            avgSize: trader.avgSize, // Default average size\n                            avgLeverage: trader.avgLeverage, // Default average leverage\n                            winRatio: trader.winRatio, // Default win ratio,\n                            balance: trader.balance, // Default balance,\n                            traderId: traderAddress, // Use trader address as ID,\n                            chainId: trader.chainId, // Default chain ID,\n                            pnl: trader.pnl, // Default PnL\n                            updatedAt: trader.updatedAt, // Default updated time\n                        });\n                    }\n                    updateWatchedUsersUI();\n                    return [3 /*break*/, 5];\n                case 4:\n                    error_3 = _b.sent();\n                    console.error(\"Error loading watched traders:\", error_3);\n                    utils.showToast(\"Failed to load watched traders\", \"error\");\n                    return [3 /*break*/, 5];\n                case 5: return [2 /*return*/];\n            }\n        });\n    });\n}\nfunction updateWatchedPositionsUI() {\n    var watchedPositionsList = document.querySelector(\".watched-positions-list\");\n    if (!watchedPositionsList)\n        return;\n    var fragment = document.createDocumentFragment();\n    if (watchedPositions.length > 0) {\n        watchedPositions.forEach(function (position) {\n            var sideClass = position.side.toLowerCase();\n            var pnlClass = position.pnl.startsWith(\"+\") ? \"positive\" : \"negative\";\n            var positionRow = document.createElement(\"tr\");\n            positionRow.className = \"watched-position-item\";\n            positionRow.innerHTML = \"\\n        <td class=\\\"trader-info\\\">\\n          \".concat(position.traderName, \"\\n        </td>\\n        <td>\\n          <md-chip class=\\\"position-side-chip \").concat(sideClass, \"\\\">\\n            \").concat(position.side, \"\\n          </md-chip>\\n          \").concat(position.market, \"\\n        </td>\\n        <td>\").concat(position.size, \"</td>\\n        <td class=\\\"position-pnl \").concat(pnlClass, \"\\\">\").concat(position.pnl, \"</td>\\n        <td>\").concat(position.entryPrice, \"</td>\\n        <td>\").concat(position.currentPrice, \"</td>\\n        <td>\\n          <md-filled-button class=\\\"copy-position-btn\\\" data-position-id=\\\"\").concat(position.id, \"\\\">\\n            Copy\\n          </md-filled-button>\\n        </td>\\n      \");\n            // Add copy position event listener\n            var copyBtn = positionRow.querySelector(\".copy-position-btn\");\n            if (copyBtn) {\n                copyBtn.addEventListener(\"click\", function () { return copyPosition(position.id); });\n            }\n            fragment.appendChild(positionRow);\n        });\n    }\n    else {\n        var emptyRow = document.createElement(\"tr\");\n        emptyRow.className = \"watched-position-item\";\n        emptyRow.innerHTML = \"\\n      <td colspan=\\\"7\\\" style=\\\"text-align:center;color:#666;padding:20px\\\">\\n        No open positions from watched traders\\n      </td>\\n    \";\n        fragment.appendChild(emptyRow);\n    }\n    watchedPositionsList.replaceChildren(fragment);\n}\nfunction loadWatchedPositions() {\n    // Mock data - replace with actual API call\n    var mockPositions = [\n        {\n            id: \"pos1\",\n            traderAddress: \"0x1234567890123456789012345678901234567890\",\n            traderName: \"1234...7890\",\n            market: \"ETH/USD\",\n            side: \"LONG\",\n            size: \"$15,000\",\n            pnl: \"+$2,250\",\n            entryPrice: \"$3,180.50\",\n            currentPrice: \"$3,330.25\",\n            leverage: \"8x\",\n            timestamp: new Date().toISOString(),\n        },\n        {\n            id: \"pos2\",\n            traderAddress: \"0x1234567890123456789012345678901234567890\",\n            traderName: \"1234...7890\",\n            market: \"BTC/USD\",\n            side: \"SHORT\",\n            size: \"$8,500\",\n            pnl: \"-$340\",\n            entryPrice: \"$66,500.00\",\n            currentPrice: \"$67,200.50\",\n            leverage: \"5x\",\n            timestamp: new Date().toISOString(),\n        },\n    ];\n    watchedPositions = mockPositions;\n    updateWatchedPositionsUI();\n}\nfunction copyPosition(positionId) {\n    return __awaiter(this, void 0, void 0, function () {\n        var position;\n        return __generator(this, function (_a) {\n            if (!(provider === null || provider === void 0 ? void 0 : provider.isConnected())) {\n                utils.showToast(\"Please connect your wallet first\", \"warning\");\n                return [2 /*return*/];\n            }\n            position = watchedPositions.find(function (p) { return p.id === positionId; });\n            if (!position)\n                return [2 /*return*/];\n            try {\n                // Here you would implement the actual position copying logic\n                utils.showToast(\"Copying \".concat(position.market, \" \").concat(position.side, \" position...\"), \"info\");\n                // Mock API call for copying position\n                // await copyTraderPosition(position);\n                utils.showToast(\"Successfully copied \".concat(position.market, \" position\"), \"success\");\n            }\n            catch (error) {\n                console.error(\"Error copying position:\", error);\n                utils.showToast(\"Failed to copy position\", \"error\");\n            }\n            return [2 /*return*/];\n        });\n    });\n}\nfunction loadCopyConfiguration() {\n    // Load saved configuration from localStorage or API\n    var savedConfig = localStorage.getItem(\"copyConfig\");\n    if (savedConfig) {\n        copyConfig = JSON.parse(savedConfig);\n    }\n    // Update UI with current configuration\n    updateConfigurationUI();\n}\nfunction updateConfigurationUI() {\n    var maxPositionSize = document.getElementById(\"maxPositionSize\");\n    var maxLeverage = document.getElementById(\"maxLeverage\");\n    var riskPercentage = document.getElementById(\"riskPercentage\");\n    var autoCopyEnabled = document.getElementById(\"autoCopyEnabled\");\n    var stopLossEnabled = document.getElementById(\"stopLossEnabled\");\n    var stopLossPercent = document.getElementById(\"stopLossPercent\");\n    var takeProfitEnabled = document.getElementById(\"takeProfitEnabled\");\n    var takeProfitPercent = document.getElementById(\"takeProfitPercent\");\n    if (maxPositionSize)\n        maxPositionSize.value = copyConfig.maxPositionSize.toString();\n    if (maxLeverage)\n        maxLeverage.value = copyConfig.maxLeverage.toString();\n    if (riskPercentage)\n        riskPercentage.value = copyConfig.riskPercentage.toString();\n    if (autoCopyEnabled)\n        autoCopyEnabled.checked = copyConfig.autoCopyEnabled;\n    if (stopLossEnabled)\n        stopLossEnabled.checked = copyConfig.stopLossEnabled;\n    if (stopLossPercent) {\n        stopLossPercent.value = copyConfig.stopLossPercent.toString();\n        stopLossPercent.disabled = !copyConfig.stopLossEnabled;\n    }\n    if (takeProfitEnabled)\n        takeProfitEnabled.checked = copyConfig.takeProfitEnabled;\n    if (takeProfitPercent) {\n        takeProfitPercent.value = copyConfig.takeProfitPercent.toString();\n        takeProfitPercent.disabled = !copyConfig.takeProfitEnabled;\n    }\n    // Update token chips\n    updateTokenChips();\n}\nfunction updateTokenChips() {\n    var tokenChips = [\"ethChip\", \"btcChip\", \"solChip\", \"avaxChip\", \"arbChip\"];\n    var tokenMap = {\n        ethChip: \"ETH\",\n        btcChip: \"BTC\",\n        solChip: \"SOL\",\n        avaxChip: \"AVAX\",\n        arbChip: \"ARB\",\n    };\n    tokenChips.forEach(function (chipId) {\n        var chip = document.getElementById(chipId);\n        if (chip && tokenMap[chipId]) {\n            chip.selected = copyConfig.allowedTokens.includes(tokenMap[chipId]);\n            chip.addEventListener(\"click\", function () { return toggleTokenFilter(tokenMap[chipId]); });\n        }\n    });\n}\nfunction toggleTokenFilter(token) {\n    var index = copyConfig.allowedTokens.indexOf(token);\n    if (index > -1) {\n        copyConfig.allowedTokens.splice(index, 1);\n    }\n    else {\n        copyConfig.allowedTokens.push(token);\n    }\n}\nfunction addCustomToken() {\n    var customTokenInput = document.getElementById(\"customToken\");\n    if (!customTokenInput)\n        return;\n    var token = customTokenInput.value.trim().toUpperCase();\n    if (token && !copyConfig.allowedTokens.includes(token)) {\n        copyConfig.allowedTokens.push(token);\n        customTokenInput.value = \"\";\n        utils.showToast(\"Added \".concat(token, \" to allowed tokens\"), \"success\");\n    }\n}\nfunction saveCopyConfiguration() {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    try {\n        // Gather all configuration values\n        var maxPositionSize = (_a = document.getElementById(\"maxPositionSize\")) === null || _a === void 0 ? void 0 : _a.value;\n        var maxLeverage = (_b = document.getElementById(\"maxLeverage\")) === null || _b === void 0 ? void 0 : _b.value;\n        var riskPercentage = (_c = document.getElementById(\"riskPercentage\")) === null || _c === void 0 ? void 0 : _c.value;\n        var autoCopyEnabled = (_d = document.getElementById(\"autoCopyEnabled\")) === null || _d === void 0 ? void 0 : _d.checked;\n        var stopLossEnabled = (_e = document.getElementById(\"stopLossEnabled\")) === null || _e === void 0 ? void 0 : _e.checked;\n        var stopLossPercent = (_f = document.getElementById(\"stopLossPercent\")) === null || _f === void 0 ? void 0 : _f.value;\n        var takeProfitEnabled = (_g = document.getElementById(\"takeProfitEnabled\")) === null || _g === void 0 ? void 0 : _g.checked;\n        var takeProfitPercent = (_h = document.getElementById(\"takeProfitPercent\")) === null || _h === void 0 ? void 0 : _h.value;\n        copyConfig = __assign(__assign({}, copyConfig), { maxPositionSize: Number(maxPositionSize) || 1000, maxLeverage: Number(maxLeverage) || 5, riskPercentage: Number(riskPercentage) || 2, autoCopyEnabled: autoCopyEnabled || false, stopLossEnabled: stopLossEnabled || false, stopLossPercent: Number(stopLossPercent) || 10, takeProfitEnabled: takeProfitEnabled || false, takeProfitPercent: Number(takeProfitPercent) || 20 });\n        // Save to localStorage\n        localStorage.setItem(\"copyConfig\", JSON.stringify(copyConfig));\n        utils.showToast(\"Configuration saved successfully\", \"success\");\n    }\n    catch (error) {\n        console.error(\"Error saving configuration:\", error);\n        utils.showToast(\"Failed to save configuration\", \"error\");\n    }\n}\nfunction resetCopyConfiguration() {\n    copyConfig = {\n        maxPositionSize: 1000,\n        maxLeverage: 5,\n        riskPercentage: 2,\n        allowedTokens: [\"ETH\", \"BTC\"],\n        autoCopyEnabled: false,\n        stopLossEnabled: false,\n        stopLossPercent: 10,\n        takeProfitEnabled: false,\n        takeProfitPercent: 20,\n    };\n    updateConfigurationUI();\n    utils.showToast(\"Configuration reset to defaults\", \"info\");\n}\n// Refresh positions every 30 seconds\nsetInterval(function () {\n    if (document.querySelector(\".watched-positions-list\")) {\n        loadWatchedPositions();\n    }\n}, 30000);\nfunction showTraderConfig(address) {\n    // Implementation will be added later.\n}\nfunction setupSelectAllCheckbox() {\n    var selectAllCheckbox = document.getElementById(\"selectAllTraders\");\n    var traderCheckboxes = document.querySelectorAll(\".trader-checkbox\");\n    if (!selectAllCheckbox)\n        return;\n    // Update the \"Select All\" checkbox state based on individual checkboxes\n    var updateSelectAllState = function () {\n        var allChecked = Array.from(traderCheckboxes).every(function (checkbox) { return checkbox.checked; });\n        var someChecked = Array.from(traderCheckboxes).some(function (checkbox) { return checkbox.checked; });\n        selectAllCheckbox.checked = allChecked;\n        selectAllCheckbox.indeterminate = !allChecked && someChecked;\n    };\n    // Add event listener to \"Select All\" checkbox\n    selectAllCheckbox.addEventListener(\"change\", function () {\n        var isChecked = selectAllCheckbox.checked;\n        traderCheckboxes.forEach(function (checkbox) {\n            checkbox.checked = isChecked;\n            var address = checkbox.getAttribute(\"data-address\");\n            if (address) {\n                handleTraderSelection(address, isChecked);\n            }\n        });\n    });\n    // Add event listeners to individual checkboxes\n    traderCheckboxes.forEach(function (checkbox) {\n        checkbox.addEventListener(\"change\", updateSelectAllState);\n    });\n    // Initialize the state of the \"Select All\" checkbox\n    updateSelectAllState();\n}\nfunction showTraderPositions(address) {\n    var trader = watchedUsers.find(function (user) { return user.address === address; });\n    if (!trader) {\n        utils.showToast(\"Trader not found in watch list\", \"error\");\n        return;\n    }\n    // Fetch trader's positions\n    fetch(\"/api/trader_positions?address=\".concat(address))\n        .then(function (response) {\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch trader positions\");\n        }\n        return response.json();\n    })\n        .then(function (positions) {\n        // Update watched positions with the fetched data\n        watchedPositions = positions.map(function (position) { return (__assign(__assign({}, position), { traderName: \"\".concat(address.slice(0, 6), \"...\").concat(address.slice(-4)) })); });\n        // Update the UI to display the positions\n        updateWatchedPositionsUI();\n        utils.showToast(\"Loaded positions for \".concat(address.slice(0, 6), \"...\").concat(address.slice(-4)), \"success\");\n    })\n        .catch(function (error) {\n        console.error(\"Error fetching trader positions:\", error);\n        utils.showToast(\"Failed to load trader positions\", \"error\");\n    });\n}\nfunction handleTraderSelection(address, checked) {\n    var trader = watchedUsers.find(function (user) { return user.address === address; });\n    if (!trader) {\n        console.warn(\"Trader with address \".concat(address, \" not found in watch list.\"));\n        return;\n    }\n    if (checked) {\n        trader.watching += 1;\n    }\n    else {\n        trader.watching = Math.max(0, trader.watching - 1);\n    }\n    console.log(\"Trader \".concat(address, \" selection updated. Watching count: \").concat(trader.watching));\n}\n"],"names":[],"sourceRoot":""}