{"version":3,"file":"static_ts-front-end_watch-list_ts.app.bundle.js","mappings":";;;;;;;;;;;;;;;AAA2C;AACuB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,oCAAoC,yBAAyB;AAC7D;AACA;AACA;AACA;AACA,YAAY,+EAAkB;AAC9B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,QAAQ,wDAAe;AACvB,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA,gBAAgB,SAAI,IAAI,SAAI;AAC5B;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,cAAc,6BAA6B,0BAA0B,cAAc,qBAAqB;AACxG,6IAA6I,cAAc;AAC3J,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,mCAAmC,SAAS;AAC5C,mCAAmC,WAAW,UAAU;AACxD,0CAA0C,cAAc;AACxD;AACA,8GAA8G,OAAO;AACrH,iFAAiF,iBAAiB;AAClG,yDAAyD,gBAAgB,QAAQ;AACjF,+CAA+C,gBAAgB,gBAAgB;AAC/E;AACA,kCAAkC;AAClC;AACA;AACA,UAAU,YAAY,aAAa,SAAS,UAAU;AACtD,oCAAoC,SAAS;AAC7C;AACA;AACuC;AACK;AAC5C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,oCAAoC,+CAAQ,aAAa,+CAAQ,uBAAuB,+CAAQ;AAChG;AACA,wBAAwB,wDAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAe;AACnC;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA,oCAAoC,+CAAQ,aAAa,+CAAQ,uBAAuB,+CAAQ;AAChG;AACA,wBAAwB,wDAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wDAAe;AACvC;AACA;AACA;AACA;AACA;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAe;AACnC;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,8CAAK;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,8CAAK;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,yDAAyD;AACzD;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,iCAAiC;AACjC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,8FAA8F,WAAW;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAe;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,+BAA+B;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wDAAe;AACvC;AACA;AACA;AACA,gEAAgE,gEAAgE;AAChI,wBAAwB,wDAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,iBAAiB,qCAAqC;AAC9G;AACA;AACA;AACA;AACA,oBAAoB,wDAAe;AACnC;AACA;AACA;AACA;AACA,oBAAoB,wDAAe;AACnC;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA,gEAAgE,+BAA+B;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wDAAe;AACvC;AACA;AACA;AACA,8BAA8B,+CAAQ,aAAa,+CAAQ,uBAAuB,+CAAQ;AAC1F,4BAA4B,wDAAe;AAC3C;AACA;AACA;AACA,wBAAwB,wDAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAe;AACnC;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP,6DAA6D,oCAAoC;AACjG;AACA;AACA;AACA,QAAQ,wDAAe;AACvB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,0BAA0B;AAC5G,kFAAkF,0BAA0B;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACO;AACP;AACA,iFAAiF;AACjF;AACA;AACA,KAAK,IAAI;AACT;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;AACA,QAAQ,wDAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,QAAQ,wDAAe;AACvB,KAAK;AACL;AACA;AACA,QAAQ,wDAAe;AACvB,KAAK;AACL;AACA;AACO;AACP;AACA","sources":["webpack://hono/./static/ts-front-end/watch-list.ts","webpack://hono/./static/ts-front-end/watch-list/watched-traders.ts"],"sourcesContent":["import { default as utils } from \"./utils\";\nimport { loadWatchedTraders } from \"./watch-list/watched-traders\";\nvar watchedPositions = [];\nvar copyConfig = {\n    maxPositionSize: 1000,\n    maxLeverage: 5,\n    riskPercentage: 2,\n    allowedTokens: [\"ETH\", \"BTC\"],\n    autoCopyEnabled: false,\n    stopLossEnabled: false,\n    stopLossPercent: 10,\n    takeProfitEnabled: false,\n    takeProfitPercent: 20,\n};\nexport function showWatchList() {\n    // Load watch list HTML\n    fetch(\"/html/watch-list.html\")\n        .then(function (response) { return response.text(); })\n        .then(function (html) {\n        var indexContent = document.querySelector(\".index-content\");\n        if (indexContent) {\n            indexContent.innerHTML = html;\n            loadWatchedTraders();\n            // loadCopiedPositions()\n            // loadOpenPositions()\n        }\n    })\n        .catch(function (error) {\n        console.error(\"Error loading watch list HTML:\", error);\n        utils.showToast(\"Failed to load watch list\", \"error\");\n    });\n}\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { provider } from \"../metamask\";\nimport { default as utils } from \"../utils\";\n// Cache our HTML templates into memory\nvar watchedTraderRowTemplate = null;\nvar traderActionsMenuTemplate = null;\n// Store watched traders\nvar watchedTraders = [];\nexport function getActiveWatchedTraders() {\n    return __awaiter(this, void 0, void 0, function () {\n        var walletAddress, response, data, error_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    walletAddress = provider === null || provider === void 0 ? void 0 : provider.selectedAddress;\n                    if (!walletAddress) {\n                        utils.showToast(\"Please connect your wallet first\", \"warning\");\n                        return [2 /*return*/, []];\n                    }\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 4, , 5]);\n                    return [4 /*yield*/, fetch(\"/api/trader/watched?active=true&copierAddress=\".concat(walletAddress))];\n                case 2:\n                    response = _a.sent();\n                    if (!response.ok) {\n                        throw new Error(\"Failed to fetch active watched traders\");\n                    }\n                    return [4 /*yield*/, response.json()];\n                case 3:\n                    data = _a.sent();\n                    return [2 /*return*/, data.active_watched_traders || []];\n                case 4:\n                    error_1 = _a.sent();\n                    console.error(\"Error fetching active watched traders:\", error_1);\n                    utils.showToast(\"Failed to fetch active watched traders\", \"error\");\n                    return [2 /*return*/, []];\n                case 5: return [2 /*return*/];\n            }\n        });\n    });\n}\nexport function loadWatchedTraders() {\n    return __awaiter(this, void 0, void 0, function () {\n        var walletAddress, response, payload, _i, _a, trader, traderAddress, error_2;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    walletAddress = provider === null || provider === void 0 ? void 0 : provider.selectedAddress;\n                    if (!walletAddress) {\n                        utils.showToast(\"Please connect your wallet first\", \"warning\");\n                        return [2 /*return*/];\n                    }\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, 5, , 6]);\n                    return [4 /*yield*/, fetch(\"/api/trader/watched?copierAddress=\".concat(walletAddress) // Fetch all watched traders for the connected wallet\n                        )];\n                case 2:\n                    response = _b.sent();\n                    if (!response.ok) {\n                        throw new Error(\"Failed to load watched traders\");\n                    }\n                    return [4 /*yield*/, response.json()];\n                case 3:\n                    payload = (_b.sent());\n                    console.log(\"watched_traders payload:\", payload);\n                    if (!payload || !Array.isArray(payload.traders)) {\n                        utils.showToast(\"No watched traders found\", \"info\");\n                        return [2 /*return*/];\n                    }\n                    // Clear existing watched traders\n                    watchedTraders = [];\n                    // Fetch trader details for each watched trader\n                    for (_i = 0, _a = payload.traders; _i < _a.length; _i++) {\n                        trader = _a[_i];\n                        traderAddress = trader.address;\n                        watchedTraders.push({\n                            address: traderAddress,\n                            copyStatus: \"inactive\",\n                            watching: 0, // Default watching count\n                            platform_ranking: trader.platform_ranking, // Default ranking\n                            dex_platform: trader.dex_platform, // Default platform\n                            pnlPercentage: trader.pnlPercentage, // Default PnL percentage\n                            avgSize: trader.avgSize, // Default average size\n                            avgLeverage: trader.avgLeverage, // Default average leverage\n                            winRatio: trader.winRatio, // Default win ratio,\n                            balance: trader.balance, // Default balance,\n                            traderId: traderAddress, // Use trader address as ID,\n                            chainId: trader.chainId, // Default chain ID,\n                            pnl: trader.pnl, // Default PnL\n                            updatedAt: trader.updatedAt, // Default updated time\n                        });\n                    }\n                    return [4 /*yield*/, updateWatchedTradersUI()];\n                case 4:\n                    _b.sent();\n                    return [3 /*break*/, 6];\n                case 5:\n                    error_2 = _b.sent();\n                    console.error(\"Error loading watched traders:\", error_2);\n                    utils.showToast(\"Failed to load watched traders\", \"error\");\n                    return [3 /*break*/, 6];\n                case 6: return [2 /*return*/];\n            }\n        });\n    });\n}\nexport function updateWatchedTradersUI() {\n    return __awaiter(this, void 0, void 0, function () {\n        var watchedTradersList, selectedAddresses, fragment, response, error_3, emptyRow;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    watchedTradersList = document.querySelector(\".watched-traders-list\");\n                    if (!watchedTradersList)\n                        return [2 /*return*/];\n                    return [4 /*yield*/, getActiveWatchedTraders()];\n                case 1:\n                    selectedAddresses = _a.sent();\n                    console.log(\"Selected addresses:\", selectedAddresses);\n                    fragment = document.createDocumentFragment();\n                    if (!(watchedTraders.length > 0)) return [3 /*break*/, 9];\n                    if (!!watchedTraderRowTemplate) return [3 /*break*/, 8];\n                    _a.label = 2;\n                case 2:\n                    _a.trys.push([2, 7, , 8]);\n                    return [4 /*yield*/, fetch(\"/html/watched-trader-row.html\")];\n                case 3:\n                    response = _a.sent();\n                    if (!response.ok) return [3 /*break*/, 5];\n                    return [4 /*yield*/, response.text()];\n                case 4:\n                    watchedTraderRowTemplate = _a.sent();\n                    return [3 /*break*/, 6];\n                case 5: throw new Error(\"Failed to load template\");\n                case 6: return [3 /*break*/, 8];\n                case 7:\n                    error_3 = _a.sent();\n                    console.error(\"Error loading watched trader row template:\", error_3);\n                    utils.showToast(\"Failed to load template\", \"error\");\n                    return [2 /*return*/];\n                case 8:\n                    watchedTraders.forEach(function (trader, index) {\n                        // Create a table to properly parse the tr element\n                        var tempTable = document.createElement(\"table\");\n                        tempTable.innerHTML = \"<tbody>\".concat(watchedTraderRowTemplate, \"</tbody>\");\n                        var traderRow = tempTable.querySelector(\"tr.watched-trader-item\");\n                        if (traderRow) {\n                            // Update elements based on their IDs\n                            var addressHash = trader.address.slice(2, 4).toUpperCase();\n                            // Trader checkbox\n                            var traderCheckbox = traderRow.querySelector(\"#trader-checkbox\");\n                            if (traderCheckbox) {\n                                traderCheckbox.setAttribute(\"data-address\", trader.address);\n                                traderCheckbox.removeAttribute(\"id\");\n                                traderCheckbox.className = \"trader-checkbox\";\n                                // Restore checkbox state from localStorage\n                                traderCheckbox.checked = selectedAddresses.includes(trader.address);\n                            }\n                            // Rank\n                            var traderRank = traderRow.querySelector(\"#user-rank\");\n                            if (traderRank) {\n                                traderRank.textContent = \"#\".concat(trader.platform_ranking || index + 1);\n                                traderRank.removeAttribute(\"id\");\n                            }\n                            // Platform\n                            var traderPlatform = traderRow.querySelector(\"#user-platform\");\n                            if (traderPlatform) {\n                                traderPlatform.innerHTML = utils.getPlatformIcon(trader.dex_platform);\n                                traderPlatform.removeAttribute(\"id\");\n                            }\n                            // Trader icon\n                            var traderIcon = traderRow.querySelector(\"#trader-icon\");\n                            if (traderIcon) {\n                                traderIcon.textContent = addressHash;\n                                traderIcon.style.background = utils.generateIconColor(trader.address);\n                                traderIcon.removeAttribute(\"id\");\n                            }\n                            // Trader address\n                            var traderAddress = traderRow.querySelector(\"#trader-address\");\n                            if (traderAddress) {\n                                traderAddress.textContent = \"\".concat(trader.address.slice(0, 6), \"...\").concat(trader.address.slice(-4));\n                                traderAddress.removeAttribute(\"id\");\n                            }\n                            // PNL\n                            var traderPnl = traderRow.querySelector(\"#user-pnl\");\n                            if (traderPnl) {\n                                var pnlValue = Number(trader.pnlPercentage || 0);\n                                traderPnl.textContent = \"\".concat(pnlValue.toFixed(2), \"%\");\n                                traderPnl.className = \"user-pnl \".concat(pnlValue >= 0 ? \"positive\" : \"negative\");\n                                traderPnl.removeAttribute(\"id\");\n                            }\n                            // Win Ratio\n                            var traderWinRatio = traderRow.querySelector(\"#user-winratio\");\n                            if (traderWinRatio) {\n                                var winRatioValue = Number(trader.winRatio || 0);\n                                traderWinRatio.textContent = winRatioValue.toFixed(2);\n                                traderWinRatio.removeAttribute(\"id\");\n                            }\n                            // Watching count\n                            var traderWatching = traderRow.querySelector(\"#user-watching\");\n                            if (traderWatching) {\n                                traderWatching.textContent = (trader.watching || 0).toString();\n                                traderWatching.removeAttribute(\"id\");\n                            }\n                            // Actions button\n                            var actionsBtn = traderRow.querySelector(\"#actions-btn\");\n                            if (actionsBtn) {\n                                actionsBtn.setAttribute(\"data-address\", trader.address);\n                                actionsBtn.removeAttribute(\"id\");\n                            }\n                            // Add click event listener to select trader (same as top-traders)\n                            traderRow.addEventListener(\"click\", function (e) {\n                                // Don't trigger selection if clicking on checkbox\n                                if (!e.target.closest(\".trader-checkbox\")) {\n                                    console.log(\"Trader row clicked:\", trader.address);\n                                    //selectTrader(trader);\n                                }\n                            });\n                            // Add event listener for checkbox\n                            if (traderCheckbox) {\n                                traderCheckbox.addEventListener(\"change\", function (e) {\n                                    e.stopPropagation(); // Prevent row click\n                                    handleTraderSelection();\n                                });\n                            }\n                            // Add event listener for actions button\n                            if (actionsBtn) {\n                                actionsBtn.addEventListener(\"click\", function (e) {\n                                    e.stopPropagation(); // Prevent row click\n                                    showTraderActionsMenu(trader.address, e.target);\n                                });\n                            }\n                            fragment.appendChild(traderRow);\n                        }\n                    });\n                    return [3 /*break*/, 10];\n                case 9:\n                    emptyRow = document.createElement(\"tr\");\n                    emptyRow.className = \"watched-trader-item\";\n                    emptyRow.innerHTML = \"\\n      <td colspan=\\\"7\\\" style=\\\"text-align:center;color:#666;padding:20px\\\">\\n        No traders in watch list. Click \\\"Add Trader\\\" to start watching.\\n      </td>\\n    \";\n                    fragment.appendChild(emptyRow);\n                    _a.label = 10;\n                case 10:\n                    watchedTradersList.replaceChildren(fragment);\n                    setupSelectAllCheckbox();\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nexport function showTraderActionsMenu(address, button) {\n    return __awaiter(this, void 0, void 0, function () {\n        var existingMenu, response, error_4, menu, rect, trader, copyToggle, closeMenu;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    existingMenu = document.querySelector(\".trader-actions-menu\");\n                    if (existingMenu) {\n                        existingMenu.remove();\n                    }\n                    if (!!traderActionsMenuTemplate) return [3 /*break*/, 7];\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 6, , 7]);\n                    return [4 /*yield*/, fetch(\"/html/trader-actions-menu.html\")];\n                case 2:\n                    response = _a.sent();\n                    if (!response.ok) return [3 /*break*/, 4];\n                    return [4 /*yield*/, response.text()];\n                case 3:\n                    traderActionsMenuTemplate = _a.sent();\n                    return [3 /*break*/, 5];\n                case 4: throw new Error(\"Failed to load menu template\");\n                case 5: return [3 /*break*/, 7];\n                case 6:\n                    error_4 = _a.sent();\n                    console.error(\"Error loading trader actions menu template:\", error_4);\n                    utils.showToast(\"Failed to load menu\", \"error\");\n                    return [2 /*return*/];\n                case 7:\n                    menu = document.createElement(\"div\");\n                    menu.className = \"trader-actions-menu\";\n                    // Replace TRADER_ADDRESS placeholder in the template with actual address\n                    menu.innerHTML = traderActionsMenuTemplate.replace(\"TRADER_ADDRESS\", address);\n                    rect = button.getBoundingClientRect();\n                    menu.style.position = \"fixed\";\n                    menu.style.top = \"\".concat(rect.bottom + 5, \"px\");\n                    menu.style.left = \"\".concat(rect.left, \"px\");\n                    menu.style.zIndex = \"1000\";\n                    trader = watchedTraders.find(function (t) { return t.address === address; });\n                    copyToggle = menu.querySelector(\"#copy-toggle-\".concat(address));\n                    if (copyToggle && trader) {\n                        if (trader.copyStatus === \"active\") {\n                            copyToggle.innerHTML = \"\\n        <svg width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 24 24\\\">\\n          <path fill=\\\"currentColor\\\" d=\\\"M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z\\\"/>\\n        </svg>\\n        Stop Copying\\n      \";\n                        }\n                    }\n                    // Add event listeners for menu items\n                    menu.addEventListener(\"click\", function (e) {\n                        var menuItem = e.target.closest(\".menu-item\");\n                        if (!menuItem)\n                            return;\n                        var action = menuItem.getAttribute(\"data-action\");\n                        switch (action) {\n                            case \"config\":\n                                showTraderConfig(address);\n                                break;\n                            case \"positions\":\n                                showTraderPositions(address);\n                                break;\n                            case \"copy\":\n                                toggleCopyStatus(address);\n                                break;\n                            case \"remove\":\n                                removeTraderFromWatchList(address);\n                                break;\n                        }\n                        menu.remove();\n                    });\n                    closeMenu = function (e) {\n                        if (!menu.contains(e.target)) {\n                            menu.remove();\n                            document.removeEventListener(\"click\", closeMenu);\n                        }\n                    };\n                    document.addEventListener(\"click\", closeMenu);\n                    document.body.appendChild(menu);\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nexport function addTraderToWatchList(address) {\n    return __awaiter(this, void 0, void 0, function () {\n        var response, traderData, watchedTrader, error_5;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 4, , 5]);\n                    // Validate address format\n                    if (!address.startsWith(\"0x\") || address.length !== 42) {\n                        utils.showToast(\"Invalid address format\", \"error\");\n                        return [2 /*return*/];\n                    }\n                    // Check if already watching\n                    if (watchedTraders.some(function (trader) { return trader.address.toLowerCase() === address.toLowerCase(); })) {\n                        utils.showToast(\"Already watching this trader\", \"warning\");\n                        return [2 /*return*/];\n                    }\n                    return [4 /*yield*/, fetch(\"/api/users/\".concat(address))];\n                case 1:\n                    response = _a.sent();\n                    if (!response.ok) {\n                        throw new Error(\"Trader not found\");\n                    }\n                    return [4 /*yield*/, response.json()];\n                case 2:\n                    traderData = _a.sent();\n                    watchedTrader = __assign(__assign({}, traderData), { copyStatus: \"inactive\", watching: 0 });\n                    watchedTraders.push(watchedTrader);\n                    return [4 /*yield*/, updateWatchedTradersUI()];\n                case 3:\n                    _a.sent();\n                    utils.showToast(\"Added \".concat(address.slice(0, 6), \"...\").concat(address.slice(-4), \" to watch list\"), \"success\");\n                    return [3 /*break*/, 5];\n                case 4:\n                    error_5 = _a.sent();\n                    console.error(\"Error adding trader:\", error_5);\n                    utils.showToast(\"Failed to add trader to watch list\", \"error\");\n                    return [3 /*break*/, 5];\n                case 5: return [2 /*return*/];\n            }\n        });\n    });\n}\nexport function toggleCopyStatus(address) {\n    return __awaiter(this, void 0, void 0, function () {\n        var trader, error_6;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    trader = watchedTraders.find(function (t) { return t.address === address; });\n                    if (!trader)\n                        return [2 /*return*/];\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 3, , 4]);\n                    if (trader.copyStatus === \"active\") {\n                        // Stop copying\n                        trader.copyStatus = \"inactive\";\n                        utils.showToast(\"Stopped copying \".concat(address.slice(0, 6), \"...\").concat(address.slice(-4)), \"info\");\n                    }\n                    else {\n                        // Start copying\n                        if (!(provider === null || provider === void 0 ? void 0 : provider.isConnected())) {\n                            utils.showToast(\"Please connect your wallet first\", \"warning\");\n                            return [2 /*return*/];\n                        }\n                        trader.copyStatus = \"active\";\n                        utils.showToast(\"Started copying \".concat(address.slice(0, 6), \"...\").concat(address.slice(-4)), \"success\");\n                    }\n                    return [4 /*yield*/, updateWatchedTradersUI()];\n                case 2:\n                    _a.sent();\n                    return [3 /*break*/, 4];\n                case 3:\n                    error_6 = _a.sent();\n                    console.error(\"Error toggling copy status:\", error_6);\n                    utils.showToast(\"Failed to update copy status\", \"error\");\n                    return [3 /*break*/, 4];\n                case 4: return [2 /*return*/];\n            }\n        });\n    });\n}\nexport function removeTraderFromWatchList(address) {\n    var index = watchedTraders.findIndex(function (trader) { return trader.address === address; });\n    if (index !== -1) {\n        watchedTraders.splice(index, 1);\n        updateWatchedTradersUI();\n        utils.showToast(\"Removed trader from watch list\", \"info\");\n    }\n}\nexport function setupSelectAllCheckbox() {\n    var selectAllCheckbox = document.getElementById(\"selectAllTraders\");\n    var traderCheckboxes = document.querySelectorAll(\".trader-checkbox\");\n    if (!selectAllCheckbox)\n        return;\n    // Update the \"Select All\" checkbox state based on individual checkboxes\n    var updateSelectAllState = function () {\n        var allChecked = Array.from(traderCheckboxes).every(function (checkbox) { return checkbox.checked; });\n        var someChecked = Array.from(traderCheckboxes).some(function (checkbox) { return checkbox.checked; });\n        selectAllCheckbox.checked = allChecked;\n        selectAllCheckbox.indeterminate = !allChecked && someChecked;\n    };\n    // Add event listener to \"Select All\" checkbox\n    selectAllCheckbox.addEventListener(\"change\", function () {\n        handleTraderSelection();\n    });\n    // Add event listeners to individual checkboxes\n    traderCheckboxes.forEach(function (checkbox) {\n        checkbox.addEventListener(\"change\", updateSelectAllState);\n    });\n    // Initialize the state of the \"Select All\" checkbox\n    updateSelectAllState();\n}\nexport function handleTraderSelection() {\n    var traderCheckboxes = document.querySelectorAll(\".trader-checkbox\");\n    var selectedTraders = Array.from(traderCheckboxes).map(function (checkbox) { return ({\n        address: checkbox.getAttribute(\"data-address\") || \"\",\n        checked: checkbox.checked,\n    }); });\n    console.log(\"Selected traders:\", selectedTraders);\n}\nexport function showTraderConfig(address) {\n    // Implementation will be added later.\n    console.log(\"Showing config for trader:\", address);\n}\nexport function showTraderPositions(address) {\n    var trader = watchedTraders.find(function (trader) {\n        return address.includes(trader.address);\n    });\n    if (!trader) {\n        utils.showToast(\"Trader not found in watch list\", \"error\");\n        return;\n    }\n    // Fetch trader's positions\n    fetch(\"/api/trader_positions?address=\".concat(address))\n        .then(function (response) {\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch trader positions\");\n        }\n        return response.json();\n    })\n        .then(function (positions) {\n        // Update watched positions with the fetched data\n        // This would need to be imported from positions module\n        console.log(\"Trader positions:\", positions);\n        utils.showToast(\"Loaded positions for \".concat(address.slice(0, 6), \"...\").concat(address.slice(-4)), \"success\");\n    })\n        .catch(function (error) {\n        console.error(\"Error fetching trader positions:\", error);\n        utils.showToast(\"Failed to load trader positions\", \"error\");\n    });\n}\n// Export the watchedTraders for use in other modules if needed\nexport function getWatchedTraders() {\n    return watchedTraders;\n}\n"],"names":[],"sourceRoot":""}