* Instead of us injecting fake trades and positions to the DB, inject them into our websocket listener

* Look into implementing UI fee here: https://gmx-docs.io/docs/community/frontends/#running-a-frontend

* Create a trader_options table (Contains copy-trade settings associated with walletAddr)

* Set up the web-ui for tests..?

* Display copied positions in copied-positions.tsx

* Implement Trader.fromAddress({address: ..., fromDb: false});

* Prevent users from favoriting themselves.

* Filter favorited traders:
- Sort by performance (daily, weekly, ect.)
- Win rate
- Max drawdown
- Volume
- Avg. Trade Size
- Ect.
- Leverage
- Platform

* Load profiles even if they are not in our leaderboard table
* Load leaderboard by scanning the GMX arbitrum blockchain.

* Add replay protection to the API using EIP-712 signatures (instead of timestamps)

* Improve DB security. Get better password storage, and don't do pure SQL calls,
have us use an ORM like https://kysely.dev/.

Use a secrets manager, environment variables (DO NOT commit `.env` files to your repository), or a similar solution, to avoid hardcoding database credentials in your code.


* Get the correct leverage amount based on the smart contract? The website changes it based on the price or something else...
I want the original leverage.

* If a trader drops below rank 20, we don't properly update him and we end up with 2 traders with the rank #20.

* Don't rely on GMX SDK, directly access the GMX information through the Arbitrum network.
https://chat.deepseek.com/a/chat/s/3e73420e-bfcd-40eb-87ef-81be29c585df